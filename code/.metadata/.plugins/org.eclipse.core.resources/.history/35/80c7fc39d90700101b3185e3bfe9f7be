package com.pikitus.login.handlers;

import java.util.ArrayList;
import java.util.List;

import com.smartfoxserver.v2.SmartFoxServer;
import com.smartfoxserver.v2.api.CreateRoomSettings.RoomExtensionSettings;
import com.smartfoxserver.v2.api.ISFSGameApi;
import com.smartfoxserver.v2.entities.Room;
import com.smartfoxserver.v2.entities.SFSRoomRemoveMode;
import com.smartfoxserver.v2.entities.User;
import com.smartfoxserver.v2.entities.Zone;
import com.smartfoxserver.v2.entities.data.ISFSObject;
import com.smartfoxserver.v2.entities.match.MatchExpression;
import com.smartfoxserver.v2.entities.match.StringMatch;
import com.smartfoxserver.v2.entities.variables.RoomVariable;
import com.smartfoxserver.v2.entities.variables.SFSRoomVariable;
import com.smartfoxserver.v2.exceptions.SFSCreateRoomException;
import com.smartfoxserver.v2.extensions.BaseClientRequestHandler;
import com.smartfoxserver.v2.game.CreateSFSGameSettings;

public class RandomGameHandler extends BaseClientRequestHandler
{
	static volatile int mNextGameID = 1;
	
    @Override
    public void handleClientRequest(User user, ISFSObject params)
    {
    	String difficulty = params.getUtfString("difficulty");
    	if ( ! findGame( difficulty ) ) 
    	{
    		createRoom( user, difficulty );
    	}
    }
    
    public void createRoom(User user, String difficulty)
    {
    	// Get the game api and zone
    	ISFSGameApi gameApi = SmartFoxServer.getInstance().getAPIManager().getGameApi();
    	Zone zone = getParentExtension().getParentZone();

    	// Create a difficult variable for the room
        List<RoomVariable> roomVariablelist = new ArrayList<RoomVariable>();
        roomVariablelist.add(new SFSRoomVariable("difficulty", difficulty, false, true, false));
    	
        // Create the game settings
        CreateSFSGameSettings roomSettings = new CreateSFSGameSettings();
        roomSettings.setName("ChessGame" + mNextGameID++); 
        roomSettings.setInvitationExpiryTime(30); 
        roomSettings.setDynamic(true);
        roomSettings.setGame(true);
        roomSettings.setGamePublic(true); 
        roomSettings.setMinPlayersToStartGame(1); 
        roomSettings.setMaxUsers(2); 
        roomSettings.setMaxVariablesAllowed(10); 
        roomSettings.setMaxSpectators(0);
        roomSettings.setRoomVariables(roomVariablelist);
        roomSettings.setExtension(new RoomExtensionSettings("sfsChess", "com.pikitus.games.chess.SFSChess")); 
        roomSettings.setAutoRemoveMode(SFSRoomRemoveMode.WHEN_EMPTY); 
        
        try 
        {
        	// Create the room
        	gameApi.createGame(zone, roomSettings, user);
		} 
        catch (SFSCreateRoomException e) 
		{
			e.printStackTrace();
		}
    }  
    
    public boolean findGame(String difficulty)
    {
    	MatchExpression exp = new MatchExpression(RoomProperties.IS_GAME, BoolMatch.EQUALS, true).and
        (RoomProperties.HAS_FREE_PLAYER_SLOTS, BoolMatch.EQUALS, true).and("difficulty", StringMatch.EQUALS, difficulty);
    	findRoom();
    	return false;
    }
}
