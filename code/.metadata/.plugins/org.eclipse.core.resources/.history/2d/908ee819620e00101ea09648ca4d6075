package com.pikitus.games.chess;

import com.smartfoxserver.v2.entities.User;
import com.smartfoxserver.v2.entities.data.ISFSObject;
import com.smartfoxserver.v2.entities.data.SFSObject;

public class GameManager 
{
	private User mWhoseTurn;
	private User mPlayer1;
	private User mPlayer2;
	private volatile boolean mGameStarted = false;

	
	/**
	 * Has the game started yet
	 * @return (Boolean) True if the game has started.
	 */
	public boolean isStarted()
	{
		return mGameStarted;
	}
	
	/**
	 * Start the game
	 */
	public void startGame() 
	{
		// Check to make sure the game hasn't already started
		if (mGameStarted) 
		{
			// Throw an exception
			throw new IllegalStateException("Game is already started!");
		}

		// Mark the game started
		mGameStarted = true;
		
		// Reset the board
		mGameBoard.initializeBoard();
		
		// Get the users by the location they entered the game
		mPlayer1 = getParentRoom().getUserByPlayerId(1);
		mPlayer2 = getParentRoom().getUserByPlayerId(2);
		
		// If no player is set yet then set it to player 1 ( white )
		if (mWhoseTurn == null)
			mWhoseTurn = mPlayer1;
		
		// Create a response object
		ISFSObject resObj = new SFSObject();
		
		// Send who's turn it is
		resObj.putInt("turn", mWhoseTurn.getPlayerId());
		
		// Send player 1s information
		resObj.putUtfString("player1Name", mPlayer1.getName());
		resObj.putInt("player1Id", mPlayer1.getId());
		
		// Send player 2s information
		resObj.putUtfString("player2Name", mPlayer2.getName());
		resObj.putInt("player2Id", mPlayer2.getId());
		
		// Send information to all the clients
		this.sendSFSObject( "START_GAME", resObj );		
	}	
	
	/**
	 * Get who's turn it is
	 * @return (User) The players id.
	 */
	public User getWhoseTurn()
    {
	    return mWhoseTurn;
    }
	
	/**
	 * Set who's turn it is
	 * @param user (User) The user
	 */
	void setTurn(User user)
	{
		mWhoseTurn = user;
	}
	
	/**
	 * Swap turn
	 */
	public void swapTurn()
	{
		if ( mWhoseTurn == mPlayer1) {
			setTurn(mPlayer2);
		} else { 
			setTurn(mPlayer1);
		}
	}
	
	/**
	 * Send the user a game over command
	 */
	public void gameOver() 
	{
		this.sendSFSObject( "GAME_OVER", new SFSObject() );				
	}
	
	/**
	 * Send all the users the player that won.
	 * @param winner (User) The player that won.
	 */
	public void sendWinner( User winner ) 
	{
		ISFSObject resObj = new SFSObject();
		resObj.putInt("winner", winner.getId() );
		send("winner", resObj, getParentRoom().getUserList() );		
		gameOver();
	}	
}
